public class Main {
    public static void main(String[] args) {
        Cat C1=new Cat("losy");
        Dog d1=new Dog("dog2");
        BigDog BD1=new BigDog("BD1");
        C1.greets();

       d1.greets();
       d1.greets(d1);

       BD1.greets();
       BD1.greets(d1);
       BD1.greets(BD1);
    }
}
------------------------------Animal class----------------------------------
    public abstract class Animal {
    private String name;
    public Animal(String name) {
        this.name = name;}
    public abstract void greets();
}

------------------------------dog class--------------------------------------
public class Dog extends Animal {

    public Dog(String name) {
        super(name);
    }
    @Override
    public void greets() {
        System.out.println("woof");}
    public void greets(Dog dog){
        System.out.println("wooooof");}
}
------------------------------cat class-------------------------------------
public class Cat extends Animal{

    public Cat(String name) {
        super(name);}
    @Override
    public void greets() {
        System.out.println("Meow");}
    }

------------------------------bigDog class---------------------------------
public class BigDog extends Dog{
    public BigDog(String name) {
        super(name);}
   @Override
    public void greets() {
        //super.greets();
        System.out.println("WOOOW");}
    @Override
    public void greets(Dog dog) {
        System.out.println("WOOOOOW");}
    public void greets(BigDog bigDog){
        System.out.println("woooooooow");}
}
------------------------------movable class-------------------------------
public interface Movable {
    public abstract void moveUp();
    public abstract void moveDown();
    public abstract void moveRight();
    public abstract void moveLeft();
}
-----------------------------movablePoint class---------------------------
public class movablePoint implements Movable{
     int x;
     int y;
     int xSpeed;
     int ySpeed;
    public movablePoint(int x, int y, int xSpeed, int ySpeed) {
        this.x = x;
        this.y = y;
        this.xSpeed = xSpeed;
        this.ySpeed = ySpeed;}
    @Override
    public String toString() {
        return "movablePoint{" +
                "x=" + x +
                ", y=" + y +
                ", xSpeed=" + xSpeed +
                ", ySpeed=" + ySpeed +
                '}';}
    @Override
    public void moveUp() {
        y -= ySpeed;}
    @Override
    public void moveDown() {
       y += ySpeed;}
    @Override
    public void moveRight() {
        x -= xSpeed;}
    @Override
    public void moveLeft() {
        x += xSpeed;}
}
------------------------------------shape class-----------------------------
public abstract class Shape {
protected String color="red";
protected Boolean filled =true;
public Shape (){}
    public Shape(String color, Boolean filled) {
        this.color = color;
        this.filled = filled;}
    public String getColor() {
        return color;}

    public void setColor(String color) {
        this.color = color;}

    public void setFilled(Boolean filled) {
        this.filled = filled;}
    public boolean isFilled(){
    return filled;}
    public abstract double getArea();
public abstract double getPprimeter();
    @Override
    public String toString() {
        return "Shape{" +
                "color='" + color + '\'' +
                ", filled=" + filled +
                '}';}
}
-----------------------------------circle class------------------------------
public abstract class Circle extends Shape{

    protected double radius= 1.0;

    public Circle(){}
    public Circle(double radius) {
        this.radius = radius;}

    public Circle(String color, Boolean filled, double radius) {
        super(color, filled);
        this.radius = radius;}

    public double getRadius() {
        return radius;}

    public void setRadius(double radius) {
        this.radius = radius;}
public double getArea(){
        return Math.PI * radius * radius;}
    public double getPrimeter(){
        return 2 * Math.PI * radius;}
    @Override
    public String toString() {
        return "Circle{" +
                "radius=" + radius +
                ", color='" + color + '\'' +
                ", filled=" + filled +
                '}';}
}
-----------------------------------Rectangle class---------------------------
public abstract class Rectangle extends Shape{

    protected double width = 1.0;
    protected double length = 1.0;
    public Rectangle (){}
    public Rectangle(double width, double length) {
        this.width = width;
        this.length = length;}
    public Rectangle(String color, Boolean filled, double width, double length) {
        super(color, filled);
        this.width = width;
        this.length = length;}

    public double getWidth() {
        return width;}

    public void setWidth(double width) {
        this.width = width;}

    public double getLength() {
        return length;}

    public void setLength(double length) {
        this.length = length;}

    public double getArea(){
        return width*length;}
    public double getPerimeter(){
      return   2 * (length + width);}
    @Override
    public String toString() {
        return "Rectangle{" +
                "width=" + width +
                ", length=" + length +
                ", color='" + color + '\'' +
                ", filled=" + filled +
                '}';}
}
------------------------------------square class---------------------------
public abstract class Square extends Rectangle{

    public Square() {}

    public Square(double width, double length) {
        super(width, length);}

    public Square(String color, Boolean filled, double width, double length) {
        super(color, filled, width, length);}

    public double getSide(){
        return length;}
    public void setSide(double side){
        this.length=side;}
    public void setWidth(double side){
        this.width=side;}

    public void setLength(double side){this.length=side;}

    @Override
    public String toString() {
        return "Square{" +
                "width=" + width +
                ", length=" + length +
                ", color='" + color + '\'' +
                ", filled=" + filled +
                '}';}
}
  

